@startuml door


hide empty description

[*] -> Initialisation

state Door

state Initialisation {
    state "Register Door Service" as RegisterGATTService {
        RegisterGATTService: UUID(0x181A)
    }
    state "Register Door Characteristic" as RegisterGATTCharacteristicHash {
        RegisterGATTCharacteristicHash: UUID(0x2A6E)
    }

    [*] -> RegisterGATTService
    RegisterGATTService --> RegisterGATTCharacteristicHash : Service Created

    state join_state <<join>>
    RegisterGATTCharacteristicHash --> join_state : Characteristic Registered

    join_state --> Door : Ready
}


state Door {
    state OpenDoor
    state CloseDoor
    state choice <<choice>>

    [*] --> Scan
    Scan -> RssiWait : Mac Found
    RssiWait -> Scan : Mac Lost

    state RssiWait {
        RssiWait : Waiting for RSSI to be more than -10
    }

    RssiWait -> RssiWait : RSSI < -10

    RssiWait --> Challenge : RSSI > -10

    state Challenge {
    state ConnectToKey
    state GenerateNonce
    state WriteDoorCharacteristicNonce
    state GetKeyService
    state GetKeyCharacteristicHash
    state GetKeyCharacteristicNonce
    state WaitForNotification
    state GetKeyNonce
    state GetKeyHash
    state ComputeHashAndCompare

        state ConnectToKey {
            ConnectToKey : Connection to the key
            ConnectToKey --> GenerateNonce : Key Connected
        }

        state GenerateNonce {
            GenerateNonce : Generating Nonce
            GenerateNonce --> WriteDoorCharacteristicNonce : Nonce Generated
        }

        state WriteDoorCharacteristicNonce {
            WriteDoorCharacteristicNonce : Writing to Door Characteristic Nonce
            WriteDoorCharacteristicNonce --> GetKeyService: Nonce Written
        }

        state fork_state <<fork>>

        state GetKeyService {
            GetKeyService : Getting Key Service
            GetKeyService --> fork_state : Service Found
        }

        state join_state_bis <<join>>

        state GetKeyCharacteristicHash {
            GetKeyCharacteristicHash : Getting Key Characteristic Hash
            GetKeyCharacteristicHash --> join_state_bis : Characteristic Found
        }

        fork_state --> GetKeyCharacteristicHash

        state GetKeyCharacteristicNonce {
            GetKeyCharacteristicNonce : Getting Key Characteristic Nonce
            GetKeyCharacteristicNonce --> join_state_bis : Characteristic Found
        }

        fork_state --> GetKeyCharacteristicNonce

        join_state_bis --> WaitForNotification : Characteristics Found


        state WaitForNotification {
            WaitForNotification : Waiting for notification
            WaitForNotification --> GetKeyHash : Notification Received
        }


        state GetKeyHash {
            GetKeyHash : Writing to Key Characteristic Hash
            GetKeyHash --> GetKeyNonce : Got Hash
        }

        state GetKeyNonce {
            GetKeyNonce : Writing to Key Characteristic Nonce
            GetKeyNonce --> ComputeHashAndCompare : Got Nonce
        }

        state ComputeHashAndCompare {
            ComputeHashAndCompare : Compute Hash
            ComputeHashAndCompare : Compare to Hash generated by the key
            ComputeHashAndCompare -> choice : Hashes are equal ?
        }
    }

    choice --> OpenDoor : equal
    choice -up-> Scan : not equal

    state OpenDoor {
        OpenDoor : Open the door
        OpenDoor -left-> CloseDoor : Close the door after 10 seconds
    }

    state CloseDoor {
        CloseDoor : Close the door
        CloseDoor -> Scan : Door closed
    }
}

@enduml
